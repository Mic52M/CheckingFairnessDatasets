# import abc
# import typing
#
# import jsonschema
#
# import result
#
#
import abc
import typing

import jsonschema

import mooncloud_driver.result as result


class AbstractProbeException(abc.ABC, Exception):
    """
    ExceptionToResult is an interface implemented by (exception) classes
    that can be *converted* to a result.
    """

    @abc.abstractmethod
    def to_result(self) -> result.Result:
        pass

    def preserve_extra_data_if_any(self) -> bool:
        """
        But can be overwritten.
        :return:
        """
        return True

    def keep_rollbacking_if_during_rollback(self) -> bool:
        """

        :return: True if, during rollback, this exception is thrown and you want to keep doing rollback
        """
        return False


# class ProbeInputValidationError(AbstractProbeException):
#
#     def to_result(self, base_extra_data: typing.Optional[typing.Mapping] = None) -> result.Result:
#         # this is needed to make the type checker happy.
#         assert isinstance(self.__cause__, jsonschema.ValidationError)
#         cause: jsonschema.ValidationError = self.__cause__
#
#         return result.Result(
#             integer_result=result.INTEGER_RESULT_INPUT_ERROR,
#             pretty_result='Input validation failed. Make sure to insert all the correct parameters.',
#             base_extra_data={
#                 'message': cause.message,
#                 'field': cause.validator,
#                 'value': cause.validator_value
#             }
#         )
#
#
class ProbeBaseExceptionWithResult(AbstractProbeException, abc.ABC):
    """
    Base class which already takes in input a result. Can be refined by subclasses.

    This serves as base class for "static exceptions", where the corresponding result
    is fixed and does not change according to the specific state of the exception.

    It is primarily used by exceptions defined in this library.
    """

    def __init__(self, result_ready: result.Result):
        self.result = result_ready

    def to_result(self) -> result.Result:
        return self.result
#
#
# class ProbePreconditionFailedError(AbstractProbeException, ProbeBaseExceptionWithResult):
#     """
#     Represents something that should never happen, e.g., missing dependency, schema not found.
#
#     Here base_extra_data must be provided.
#     """
#
#     def __init__(self, base_extra_data: typing.Dict):
#         super().__init__(result_ready=result.Result(
#             integer_result=result.INTEGER_RESULT_MOON_CLOUD_ERROR,
#             pretty_result='Precondition failed. This should not happen, contact the Moon Cloud team.',
#             base_extra_data=base_extra_data
#         ))
#
#
# TypeException = typing.TypeVar('TypeException', bound=Exception)
# TypeExceptionToResult = typing.TypeVar('TypeExceptionToResult', bound=AbstractProbeException)
#
# # TODO add can_finalize
