import abc
import typing

import mooncloud_driver.atom as atom
import mooncloud_driver.config as config
import mooncloud_driver.result as result


class AbstractProbe(abc.ABC):

    def __init__(self):
        self.config: config.Config = None
        self.result = result.Result.empty()
        self.hidden_data: typing.Optional[typing.Dict] = None

    @abc.abstractmethod
    def atoms(self) -> typing.Sequence[atom.AtomPairWithException]:
        pass

    def requires_credential(self) -> typing.Any:
        return None


TAbstractProbe = typing.TypeVar('TAbstractProbe', bound=AbstractProbe, covariant=True)
