import abc
import asyncio
import json
import typing
import html

import nats

import mooncloud_driver.config as config
import mooncloud_driver.nats_controller as nats_controller
import mooncloud_driver.result as result


class WriterAbstract(abc.ABC):

    @abc.abstractmethod
    def write_results(self, result_to_write: result.Result):
        pass

    @abc.abstractmethod
    def write_hidden_data(self, hidden_data: typing.Any):
        pass


class WriterStdout(WriterAbstract):

    def write_hidden_data(self, hidden_data):
        pass

    def write_results(self, result_to_write: result.Result):
        print(json.dumps(result_to_write.to_dict()))


class WriterNATS(WriterAbstract):

    def __init__(self,current_config:config.Config) -> None:
        self.current_config=current_config

    def write_hidden_data(self, hidden_data):
        pass
    async def write_results(self, result_to_write: result.Result):
        ew_res:result.EWResult=result_to_ew_result(result_to_write=result_to_write,current_config=self.current_config)
        nats_cont=nats_controller.NatsController(current_config=self.current_config)
        await nats_cont.connect()
        await nats_cont.publishResult(self.current_config.nats_subject,result_to_write=ew_res)


def factory(current_config: config.Config) -> WriterAbstract:
    if current_config.is_production:
        return WriterNATS(current_config=current_config)
    else:
        return WriterStdout()


def write(result_to_write: result.Result,
          current_config: config.Config,
          hidden_data: typing.Optional[typing.Any] = None):

    writer = factory(current_config)
    try:
        # if NATS wait for ack otherwise just print
        if isinstance(writer, WriterNATS):
            asyncio.run(writer.write_results(result_to_write=result_to_write))
        else:
            writer.write_results(result_to_write=result_to_write)
        # for now ok, if NATS we have to wait for this too
        if hidden_data is not None:
            writer.write_hidden_data(hidden_data=hidden_data)
    except Exception as e:
        print("NATS writing error:")
        print(e)
        result_to_write.put_extra_data("nats_error","nats writing error")
        if not isinstance(writer, WriterStdout):
            writer = WriterStdout()
            writer.write_results(result_to_write=result_to_write)
            if hidden_data is not None:
                writer.write_hidden_data(hidden_data=hidden_data)

def result_to_ew_result(result_to_write:result.Result,current_config:config.Config,other_data:dict={},stack_trace:result.EWStacktrace=result.EWStacktrace()) -> result.EWResult:
        return result.EWResult(
            test_id=current_config.test_id,
            user_evaluation_rule_id=current_config.user_evaluation_rule_id,
            user_id=current_config.user_id,
            input=current_config.input,
            message=result.EWMessage(text=result_to_write.pretty_result,html=html.escape(result_to_write.pretty_result)),
            other_data=other_data,
            extradata=result_to_write.base_extra_data,
            result=result_to_write.integer_result,
            stack_trace=stack_trace
        )
